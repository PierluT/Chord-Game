{"id":"node_modules/interval-coords/index.js","dependencies":[{"name":"C:\\Users\\pierl\\Desktop\\Actam\\ChordGame\\package.json","includedInParent":true,"mtime":1672854678203},{"name":"C:\\Users\\pierl\\Desktop\\Actam\\ChordGame\\node_modules\\interval-coords\\package.json","includedInParent":true,"mtime":1672854677521}],"generated":{"js":"var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/;\n\n// The interval it takes to raise a note a semitone\nvar sharp = [-4, 7];\n\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\n\nvar baseIntervals = [\n  [0, 0],\n  [3, -5],\n  [2, -3],\n  [1, -1],\n  [0, 1],\n  [3, -4],\n  [2, -2],\n  [1, 0]\n];\n\nmodule.exports = function(simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n\n  number = sign < 0 ? -number : number;\n\n  var lower = number > 8 ? (number % 7 || 7) : number;\n  var octaves = (number - lower) / 7;\n\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2;\n\n  // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n  if (alt === -3) return null;\n\n  return [\n    sign * (base[0] + octaves + sharp[0] * alt),\n    sign * (base[1] + sharp[1] * alt)\n  ];\n}\n\n// Copy to avoid overwriting internal base intervals\nmodule.exports.coords = baseIntervals.slice(0);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/interval-coords/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/interval-coords/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/interval-coords/index.js":"var pattern = /^(AA|A|P|M|m|d|dd)(-?\\d+)$/;\n\n// The interval it takes to raise a note a semitone\nvar sharp = [-4, 7];\n\nvar pAlts = ['dd', 'd', 'P', 'A', 'AA'];\nvar mAlts = ['dd', 'd', 'm', 'M', 'A', 'AA'];\n\nvar baseIntervals = [\n  [0, 0],\n  [3, -5],\n  [2, -3],\n  [1, -1],\n  [0, 1],\n  [3, -4],\n  [2, -2],\n  [1, 0]\n];\n\nmodule.exports = function(simple) {\n  var parser = simple.match(pattern);\n  if (!parser) return null;\n\n  var quality = parser[1];\n  var number = +parser[2];\n  var sign = number < 0 ? -1 : 1;\n\n  number = sign < 0 ? -number : number;\n\n  var lower = number > 8 ? (number % 7 || 7) : number;\n  var octaves = (number - lower) / 7;\n\n  var base = baseIntervals[lower - 1];\n  var alts = base[0] <= 1 ? pAlts : mAlts;\n  var alt = alts.indexOf(quality) - 2;\n\n  // this happens, if the alteration wasn't suitable for this type\n  // of interval, such as P2 or M5 (no \"perfect second\" or \"major fifth\")\n  if (alt === -3) return null;\n\n  return [\n    sign * (base[0] + octaves + sharp[0] * alt),\n    sign * (base[1] + sharp[1] * alt)\n  ];\n}\n\n// Copy to avoid overwriting internal base intervals\nmodule.exports.coords = baseIntervals.slice(0);\n"},"lineCount":49}},"error":null,"hash":"05942cf5bc8b5f0588280d4c50983018","cacheData":{"env":{}}}