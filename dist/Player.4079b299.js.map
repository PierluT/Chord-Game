{"version":3,"sources":["js/Player.js"],"names":["Player","position","image","Image","velocity","x","y","height","width","c","fillStyle","fillRect","draw","applyGravity","canvas","rispostaGiusta","gravity","arrayBlocchi","count","nextBlock","i","length","posizioneAtterraggioY","posizioneAtterraggioX","checkedCollision","markedToCollision","disappearChord","vox","voy","nextBlockPosition","computeNextBlockDistance","nextBlockX","xDestinationNextBlock","nextBlockY","yDestinationNextBlock","xDistance","yDistance","Math","abs","move_threshold","deltaTime","deltaDistance","sqrt","deltaPixel","console","log","nextBlockToJump","chordBlockArray","find","block"],"mappings":"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","file":"Player.4079b299.js","sourceRoot":"..","sourcesContent":["\r\n class Player {\r\n    //proprietà del giocatore\r\n    constructor(position){\r\n        this.image = new Image();\r\n        //this.image.src = ...mozart o beethoven\r\n        this.position = position\r\n        //velocità di caduta per simulazione gravità\r\n        this.velocity = {\r\n            x: 0,\r\n            y: 0.8,\r\n        }\r\n        this.height = 100;\r\n        this.width = 100;\r\n    }\r\n    \r\n    draw() {\r\n        c.fillStyle= 'red'\r\n        c.fillRect(this.position.x,this.position.y,this.width,this.height)\r\n    }\r\n\r\n    //metodo per modificare le coordinate\r\n    update() {\r\n        this.draw()\r\n        this.position.x += this.velocity.x\r\n        this.position.y += this.velocity.y\r\n        this.applyGravity()\r\n\r\n    }\r\n    \r\n    applyGravity(){\r\n        // TO DO: SISTEMARE LA GRAVITA' QUANDO RISPOSTA GIUSTA E' TRUE O FALSE\r\n        if (this.position.y + this.height + this.velocity.y < canvas.height && rispostaGiusta == true){\r\n            this.velocity.y += gravity\r\n        }\r\n        else {\r\n            this.velocity.y = 0\r\n        } \r\n    }\r\n\r\n    chechForVerticalCollision(arrayBlocchi){\r\n        var count;\r\n        var nextBlock;\r\n        for (let i = 0; i < arrayBlocchi.length; i++) {\r\n            nextBlock = arrayBlocchi[i];\r\n\r\n            // HO ALZATO IL CONTROLLO DELLA COLLISIONE SULLE Y DI 10 PX\r\n            if ( this.position.x >= nextBlock.position.x && this.position.x + this.width <= nextBlock.position.x +nextBlock.width &&\r\n                this.position.y + this.height >= nextBlock.position.y - 10 &&\r\n                this.position.y < nextBlock.position.y){\r\n                count = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(count < arrayBlocchi.length && rispostaGiusta == false) {\r\n            posizioneAtterraggioY = nextBlock.position.y - nextBlock.height;\r\n            posizioneAtterraggioX = nextBlock.position.x + nextBlock.width / 2 - this.width/2;\r\n            //cade al centro del blocco\r\n            this.position.y = posizioneAtterraggioY;\r\n            this.position.x = posizioneAtterraggioX;\r\n            this.checkedCollision(nextBlock);            \r\n        }\r\n    }\r\n\r\n    checkedCollision(nextBlock){\r\n        nextBlock.markedToCollision = true;\r\n        nextBlock.disappearChord();\r\n    }\r\n\r\n    automaticJump(vox, voy){ \r\n\r\n        let nextBlockPosition = this.computeNextBlockDistance();\r\n\r\n        let nextBlockX = nextBlockPosition.xDestinationNextBlock;\r\n        let nextBlockY = nextBlockPosition.yDestinationNextBlock;\r\n        \r\n        //calcolo le distanze tra partenza e arrivo\r\n        let xDistance = nextBlockX - this.position.x;\r\n        let yDistance = nextBlockY - this.position.y;\r\n\r\n        // equazioni del moto\r\n        // deltaTime = 16  \r\n        // TO DO: v0x dovrebbe dipendere dalla distanza tra player e nextblock\r\n        if(Math.abs(xDistance) > move_threshold){\r\n            this.position.x += vox*deltaTime;\r\n        } \r\n        else if(Math.abs(xDistance) <= move_threshold){\r\n            this.position.x += 0;\r\n        }\r\n\r\n        this.position.y -= voy*deltaTime;  \r\n        \r\n        let deltaDistance = Math.sqrt(xDistance*xDistance + yDistance*yDistance);\r\n        \r\n        // CONTROLLA CHE LA DISTANZA DEL PLAYER DAL BLOCCO SIA INFERIORE A deltaPixel\r\n        // e setta rispostaGiusta = false ---> 1 - permette la collisione 2 - ferma la gravità (da sistemare)\r\n        if (deltaDistance < deltaPixel) {\r\n            rispostaGiusta = false;\r\n            console.log(rispostaGiusta)\r\n        }\r\n        \r\n    }\r\n    \r\n    computeNextBlockDistance(){\r\n        //trova il primo che ha markedtocollision = false (ovvero il prossimo su cui saltare)\r\n        let nextBlockToJump = chordBlockArray.find(block => block.markedToCollision == false);\r\n        let xDestinationNextBlock = nextBlockToJump.position.x + nextBlockToJump.width / 2 - this.width/2;\r\n        let yDestinationNextBlock = nextBlockToJump.position.y - nextBlockToJump.height; \r\n    \r\n        return {xDestinationNextBlock, yDestinationNextBlock};\r\n    }\r\n\r\n\r\n         \r\n    \r\n}\r\n"]}