{"version":3,"sources":["js/script.js"],"names":["canvas","document","getElementById","c","getContext","width","height","gravity","font","chordSignature","textWidth","measureText","scrImages","srcPlayerImages","chordBlockArray","timeToNextBlock","blockInterval","lastBlockTime","primaNota","gameOver","rispostaGiusta","V0X_MAX","V0Y_MAX","vox_MODIFIER","deltaTime","player","Player","x","y","block1","collisionBlock","position","block2","block3","push","keys","d","pressed","a","animate","timestamp","clearRect","update","forEach","block","draw","chechForVerticalCollision","automaticJump","velocity","window","requestAnimationFrame","addEventListener","event","key","nextBlockPosition","computeNextBlockDistance","nextBlockX","xDestinationNextBlock","xDistance","console","log"],"mappings":"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","file":"script.d573be0b.js","sourceRoot":"..","sourcesContent":["/*\r\nimport {Player} from './Player.js'\r\nimport { collisionBlock} from './collisionBlock.js'\r\n\r\n*/\r\nconst canvas = document.getElementById('gameSet');\r\nconst c = canvas.getContext('2d');\r\ncanvas.width = 1024\r\ncanvas.height = 750\r\n\r\nconst gravity = 0.5\r\n\r\n// TEST TONAL.JS\r\n//import { Chord } from \"tonal\";\r\n//console.log(Chord.get(\"Cadd9\"));\r\n\r\n//const colorGreen = 'rgba(75,192,192,1)';\r\nc.font = \"italic bolder 50px Arial\";\r\n//array provvisorio con elenco sigle accordi\r\n \r\nvar chordSignature = \"C\";\r\n//larghezza testo\r\n\r\n const textWidth = c.measureText(chordSignature).width;\r\n const scrImages = ['./img/assets/block1_cut.png','./img/assets/block2_cut.png'];\r\n const srcPlayerImages = ['./img/Mozart/mozart_spritesheet_completo.png','./img/Beethoven/beethoven_spritesheet_completo.png'];\r\n\r\n//blocchi che verranno disegnati dopo \r\n var chordBlockArray = [];\r\n\r\nlet timeToNextBlock = 0;\r\n//variabile che andremo a modificare con il knob della MIDI, ora è impostato a 4 sceondi\r\nlet blockInterval= 4000;\r\nlet lastBlockTime = 0;\r\n let primaNota = false\r\nlet gameOver = false\r\n let rispostaGiusta = false\r\n\r\nconst V0X_MAX = 1.1; // initial velocity (m/s)\r\nconst V0Y_MAX = 1;\r\n\r\nlet vox_MODIFIER;\r\nlet deltaTime;\r\n\r\nconst player = new Player({\r\n    x: 450,\r\n    y :0,\r\n})\r\n\r\n//blocchi di partenza\r\nconst block1 = new collisionBlock();\r\nblock1.position.x = 100;\r\nblock1.position.y = 100;\r\n\r\nconst block2 = new collisionBlock();\r\nblock2.position.x = 700;\r\nblock2.position.y = 300\r\n\r\nconst block3 = new collisionBlock();\r\nblock3.position.x = 100;\r\nblock3.position.y = 500;\r\n\r\nchordBlockArray.push(block3)\r\nchordBlockArray.push(block2)\r\nchordBlockArray.push(block1)\r\n\r\n\r\n//saranno le nostre giusto e sbagliato\r\nconst keys = {\r\n    d:{\r\n        pressed : false\r\n    },\r\n    a:{\r\n        pressed : false\r\n    }\r\n}\r\n//il timestamp mi serve per controllare il refresh automatico della animate.\r\nfunction animate (timestamp) {\r\n    c.clearRect(0,0,canvas.width,canvas.height)\r\n    deltaTime = timestamp - lastBlockTime;\r\n    lastBlockTime = timestamp;\r\n    timeToNextBlock += deltaTime; \r\n    //giocatore\r\n    player.update()\r\n\r\n    if((primaNota == true) && (timeToNextBlock > blockInterval )){\r\n       chordBlockArray.push(new collisionBlock());\r\n       timeToNextBlock = 0;\r\n    };\r\n    [...chordBlockArray].forEach(block => block.draw());\r\n    [...chordBlockArray].forEach(block => block.update());\r\n    player.chechForVerticalCollision(chordBlockArray);\r\n    //stampa dell'array aggiornato nel quale ho solamente i blocchi visibili nel canvas.\r\n    //console.log(chordBlockArray)\r\n    if(rispostaGiusta){\r\n        player.automaticJump(vox_MODIFIER, V0Y_MAX)\r\n    }\r\n\r\n    //se tengo premuto continua ad andarea destra,altrimenti si stoppa \r\n    //perchè la velocità viene risettata a 0\r\n    player.velocity.x = 0\r\n    if(keys.d.pressed) {\r\n        player.velocity.x = 1\r\n    }else if (keys.a.pressed) {\r\n        player.velocity.x = -1\r\n    }\r\n\r\n    \r\n    //richiama ogni volta la funzione\r\n    window.requestAnimationFrame(animate)\r\n}\r\n\r\nanimate(0)\r\n//in base a ciò che premo nella tastiera\r\nwindow.addEventListener('keydown', (event) =>{\r\n    primaNota = true;\r\n    \r\n    //Al posto delle lettere ci andranno le risposte esatte o sbagliate\r\n    switch(event.key){\r\n        case 'd':\r\n            keys.d.pressed = true\r\n            break\r\n        case 's':\r\n            keys.a.pressed = true\r\n                break\r\n        case 'w':\r\n                player.velocity.y = -20\r\n                break\r\n        case 'l':\r\n                let nextBlockPosition = player.computeNextBlockDistance();\r\n\r\n                let nextBlockX = nextBlockPosition.xDestinationNextBlock;\r\n\r\n                let xDistance = nextBlockX - player.position.x;\r\n\r\n                vox_MODIFIER = V0X_MAX*(xDistance/canvas.width);\r\n\r\n                rispostaGiusta = true;\r\n                console.log(rispostaGiusta)\r\n                break            \r\n    }\r\n})\r\n\r\n//per aggiornare lo status delle keys\r\nwindow.addEventListener('keyup', (event) =>{\r\n    \r\n    //Al posto delle lettere ci andranno le risposte esatte o sbagliate\r\n    switch(event.key){\r\n        case 'd':\r\n            keys.d.pressed = false\r\n            break\r\n        case 's':\r\n            keys.a.pressed = false\r\n                break\r\n        case 'w':\r\n                player.velocity.y = -10\r\n                break\r\n    }\r\n})\r\n\r\nconsole.log(srcPlayerImages[1])"]}